{
  "version": 4,
  "terraform_version": "1.2.5",
  "serial": 298,
  "lineage": "7ab86655-e9cd-7538-8859-8a86c0116aac",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "deleteItem",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "const KV_NAMESPACE = KV;\r\n\r\nasync function handleRequest(request) {\r\n    try {\r\n        const path = new URL(request.url).pathname;\r\n        await KV_NAMESPACE.delete(path.substring(1));\r\n        return jsonResponse({\r\n            data: {\r\n                status: true,\r\n                msg: \"Deleted Successfully\",\r\n            },\r\n        });\r\n    } catch (error) {\r\n        return jsonResponse({\r\n            data: { status: false, msg: error.message },\r\n            status: 500,\r\n        });\r\n    }\r\n}\r\n\r\nfunction jsonResponse({ data = null, status = 200 }) {\r\n    return new Response(JSON.stringify(data), {\r\n        status,\r\n    });\r\n}\r\n\r\naddEventListener(\"fetch\", (event) =\u003e {\r\n    event.respondWith(handleRequest(event.request));\r\n});",
            "id": "delete",
            "kv_namespace_binding": [
              {
                "name": "KV",
                "namespace_id": "efc2034df13049bf9768c3986099d73e"
              }
            ],
            "name": "delete",
            "plain_text_binding": [],
            "secret_text_binding": [],
            "service_binding": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_workers_kv_namespace.example_ns"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "getItem",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "const KV_NAMESPACE = KV;\r\n\r\nasync function handleRequest(request) {\r\n  try \r\n  {\r\n    const path = new URL(request.url).pathname;\r\n\r\n    if (path === \"/\") {\r\n        const getAll = await KV_NAMESPACE.list();\r\n        return jsonResponse(getAll.keys);\r\n    } else {\r\n        var getData = await KV_NAMESPACE.get(path.substring(1));\r\n        if (getData) {\r\n            return jsonResponse({\r\n                data: JSON.parse(getData),\r\n            });\r\n        } else {\r\n            return jsonResponse({\r\n                data: {\r\n                    status: false,\r\n                    msg: \"Not Found\",\r\n                },\r\n                status: 404,\r\n            });\r\n        }\r\n    }\r\n  }catch (error) {\r\n    return jsonResponse({\r\n      data: { status: false, msg: error.message },\r\n      status: 500,\r\n    });\r\n  }\r\n}\r\n\r\nfunction jsonResponse({ data = null, status = 200}) {\r\n  return new Response(JSON.stringify(data), {\r\n    status,\r\n  });\r\n}\r\n\r\naddEventListener(\"fetch\", (event) =\u003e {\r\n  event.respondWith(handleRequest(event.request));\r\n});",
            "id": "get",
            "kv_namespace_binding": [
              {
                "name": "KV",
                "namespace_id": "efc2034df13049bf9768c3986099d73e"
              }
            ],
            "name": "get",
            "plain_text_binding": [],
            "secret_text_binding": [],
            "service_binding": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_workers_kv_namespace.example_ns"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "postItem",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "const KV_NAMESPACE = KV;\r\n\r\nasync function handleRequest(request) {\r\n  try \r\n  {\r\n    const host = request.headers.get(\"host\");\r\n    var payload = await request.json();\r\n    var save = await savePayload(payload);\r\n    return jsonResponse({\r\n      data: {\r\n        status: true,\r\n        _id: save._id,\r\n        query: `https://${host}/${save._id}`,\r\n        data: save,\r\n      },\r\n    });\r\n  }catch (error) {\r\n    return jsonResponse({\r\n      data: { status: false, msg: error.message },\r\n      status: 500,\r\n    });\r\n  }\r\n}\r\n\r\nfunction jsonResponse({ data = null, status = 200}) {\r\n  return new Response(JSON.stringify(data), {\r\n    status,\r\n  });\r\n}\r\n\r\nasync function savePayload(payload) {\r\n  if (!payload._id)\r\n    payload._id =\r\n      new Date().getTime() + Math.random().toString(36).substring(9);\r\n  await KV_NAMESPACE.put(payload._id, JSON.stringify(payload));\r\n  return payload;\r\n}\r\n\r\naddEventListener(\"fetch\", (event) =\u003e {\r\n  event.respondWith(handleRequest(event.request));\r\n});",
            "id": "post",
            "kv_namespace_binding": [
              {
                "name": "KV",
                "namespace_id": "efc2034df13049bf9768c3986099d73e"
              }
            ],
            "name": "post",
            "plain_text_binding": [],
            "secret_text_binding": [],
            "service_binding": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_workers_kv_namespace.example_ns"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "todoItem",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "const POSTKEY = null;\r\n\r\nconst DELETEKEY = null;\r\n\r\nconst KV_NAMESPACE = KV;\r\n\r\nasync function handleRequest(request) {\r\n  try {\r\n    const host = request.headers.get(\"host\");\r\n\r\n    const path = new URL(request.url).pathname;\r\n\r\n    function getUrlParam(key) {\r\n      return new URL(request.url).searchParams.get(key);\r\n    }\r\n\r\n    switch (request.method) {\r\n      case \"OPTIONS\": {\r\n        /**  Handle Preflight */\r\n        return jsonResponse({\r\n          data: { msg: \"Preflight request success ü§ù\" },\r\n        });\r\n      }\r\n      case \"POST\": {\r\n        /**  Handle POST */\r\n        if (POSTKEY \u0026\u0026 getUrlParam(\"key\") !== POSTKEY) {\r\n          /**  Unauthorized */\r\n          return jsonResponse({\r\n            data: { status: false, msg: \"Invalid key, Unauthorized!\" },\r\n            status: 403,\r\n          });\r\n        } else {\r\n \r\n          var payload = await request.json();\r\n\r\n          var save = await savePayload(payload);\r\n\r\n          /**  Send response */\r\n          return jsonResponse({\r\n            data: {\r\n              status: true,\r\n              _id: save._id,\r\n              query: `https://${host}/${save._id}`,\r\n              data: save,\r\n            },\r\n          });\r\n        }\r\n      }\r\n      case \"GET\": {\r\n        /**  Handle GET */\r\n        if (path === \"/\") {\r\n          const getAll = await KV_NAMESPACE.list();\r\n          return jsonResponse({\r\n            data: getAll.keys,\r\n          });\r\n        } else {\r\n         \r\n          var getData = await KV_NAMESPACE.get(path.substring(1));\r\n          if (getData) {\r\n            return jsonResponse({\r\n              data: JSON.parse(getData),\r\n            });\r\n          } else {\r\n            return jsonResponse({\r\n              data: {\r\n                status: false,\r\n                msg: \"Not Found\",\r\n              },\r\n              status: 404,\r\n            });\r\n          }\r\n        }\r\n      }\r\n      case \"DELETE\": {\r\n        if (DELETEKEY \u0026\u0026 getUrlParam(\"key\") !== DELETEKEY) {\r\n          /**  Unauthorized */\r\n          return jsonResponse({\r\n            data: { status: false, msg: \"Invalid key, Unauthorized!\" },\r\n            status: 403,\r\n          });\r\n        } else {\r\n          /**  Authorized to delete payload */\r\n\r\n          await KV_NAMESPACE.delete(path.substring(1));\r\n          return jsonResponse({\r\n            data: {\r\n              status: true,\r\n              msg: \"Deleted Successfully\",\r\n            },\r\n          });\r\n        }\r\n      }\r\n      default: {\r\n        /**  Handle unknown request */\r\n        throw new Error(\"Invalid request method\");\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return jsonResponse({\r\n      data: { status: false, msg: error.message },\r\n      status: 500,\r\n    });\r\n  }\r\n}\r\n\r\nfunction jsonResponse({ data = null, status = 200}) {\r\n  return new Response(JSON.stringify(data), {\r\n    status,\r\n  });\r\n}\r\n\r\nasync function savePayload(payload) {\r\n  if (!payload._id)\r\n    payload._id =\r\n      new Date().getTime() + Math.random().toString(36).substring(9);\r\n  await KV_NAMESPACE.put(payload._id, JSON.stringify(payload));\r\n  return payload;\r\n}\r\n\r\naddEventListener(\"fetch\", (event) =\u003e {\r\n  event.respondWith(handleRequest(event.request));\r\n});",
            "id": "todo",
            "kv_namespace_binding": [
              {
                "name": "KV",
                "namespace_id": "efc2034df13049bf9768c3986099d73e"
              }
            ],
            "name": "todo",
            "plain_text_binding": [],
            "secret_text_binding": [],
            "service_binding": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_workers_kv_namespace.example_ns"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_workers_kv",
      "name": "example",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "efc2034df13049bf9768c3986099d73e/Ip-Address",
            "key": "Ip-Address",
            "namespace_id": "efc2034df13049bf9768c3986099d73e",
            "value": "Todos"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_workers_kv_namespace.example_ns"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_workers_kv_namespace",
      "name": "example_ns",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "efc2034df13049bf9768c3986099d73e",
            "title": "test-namespace"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
